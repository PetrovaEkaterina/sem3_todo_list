{"version":3,"sources":["listFunction.js","components/List.js","App.js","serviceWorker.js","index.js"],"names":["API","getList","axios","get","headers","Content-Type","then","res","data","addToList","task","post","list","console","log","deleteItem","delete","concat","catch","error","updateItem","id","put","List","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","e","setState","listItem","target","value","onSubmit","preventDefault","state","getAll","onUpdate","onEdit","itemId","item","onDelete","items","toConsumableArray","bind","assertThisInitialized","_this2","react_default","a","createElement","className","htmlFor","type","onClick","map","i","key","href","_id","class","Component","App","components_List","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cac76b7b.chunk.js","sourcesContent":["import axios from 'axios';\r\nconst API = '/api/tasks';\r\n\r\n\r\nexport const getList = () => {\r\n\r\n    return axios\r\n    .get(API , {\r\n        headers: {'Content-Type' : 'application/json'}\r\n    })\r\n    .then(res =>{\r\n        return res.data;\r\n    })\r\n\r\n}\r\n\r\n\r\nexport const addToList = (task) => {\r\n    return axios\r\n    .post(API, \r\n    {list: task},\r\n    {\r\n        headers: {'Content-Type' : 'application/json'}\r\n    })\r\n    .then(res =>{\r\n        console.log(res);\r\n    })\r\n}\r\n\r\n\r\nexport const deleteItem = (task) => {\r\n    return axios\r\n    .delete(`${API}/${task}`, {\r\n        headers: {'Content-Type' : 'application/json'}\r\n    })\r\n    .then(res =>{\r\n        console.log(res);\r\n    })\r\n    .catch((error) => {\r\n        console.log(error);\r\n    })\r\n}\r\n\r\n\r\nexport const updateItem = (task, id) => {\r\n    return axios\r\n    .put(`${API}/${id}`, \r\n    {list: task},\r\n    {\r\n        headers: {'Content-Type' : 'application/json'}\r\n    })\r\n    .then(res =>{\r\n        console.log(res);\r\n    })\r\n}\r\n","import React, { Component } from 'react';\r\nimport { getList, addToList, deleteItem, updateItem } from '../listFunction';\r\nimport './list.css';\r\n\r\nclass List extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      id: '',\r\n      listItem: '',\r\n      items: []\r\n    };\r\n\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n    this.onChange = this.onChange.bind(this);\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.getAll();\r\n  }\r\n\r\n  onChange = e => {\r\n    this.setState({listItem: e.target.value});\r\n  }\r\n\r\n  onSubmit = e => {\r\n    e.preventDefault();\r\n    addToList(this.state.listItem).then(() => {\r\n      this.getAll();\r\n    });\r\n  }\r\n\r\n  onUpdate = e => {\r\n    e.preventDefault();\r\n    updateItem(this.state.listItem, this.state.id).then(() => {\r\n      this.getAll();\r\n    });\r\n  }\r\n\r\n  onEdit = (itemId, item, e) => {\r\n    e.preventDefault();\r\n    this.setState({\r\n      id: itemId,\r\n      listItem: item\r\n    })\r\n  }\r\n\r\n  onDelete = (id, e) => {\r\n    e.preventDefault();\r\n    deleteItem(id).then(() => {\r\n      this.getAll();\r\n    });\r\n  }\r\n\r\n  getAll = () => {\r\n    getList().then(data => {\r\n      this.setState({\r\n        id: '',\r\n        listItem: '',\r\n        items: [...data]\r\n      }, () => console.log(this.state.items));\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div className=\"col-md-12 form-position\">\r\n        <form onSubmit={this.onSubmit} >\r\n          <div className=\"form-group \">\r\n            <label htmlFor=\"taskName\"> New task</label>\r\n            <div className=\"row\">\r\n              <div className=\"col-md-10\">\r\n                <input type=\"text\" className=\"form-control \" id=\"taskName\"\r\n                value={this.state.listItem || \"\"} onChange={this.onChange.bind(this)} />\r\n              </div>\r\n              <div className=\"col-md-2\">\r\n                <button className=\"btn btn-primary\" onClick={this.onUpdate.bind(this)}>Update task</button>\r\n          </div>\r\n\r\n            </div>\r\n          </div>\r\n          <div className=\"row \">\r\n          <div className=\"col-md-4\">\r\n          <button type=\"submit\" className=\"btn btn-success\" onClick={this.onSubmit.bind(this)}>Add new task</button>\r\n          </div>\r\n          </div>\r\n        </form>\r\n        <h4 className=\"text-left mt-3\">Tasks List</h4>\r\n        <ul className=\"list-group mt-3\">\r\n          {this.state.items.map((item, i) => (\r\n            <li key={i} className=\"list-group-item d-flex justify-content-between align-items-center\">\r\n              <span className=\"text-left\">{item.list}</span>\r\n              <div className=\"row\">\r\n              <span href=\"\" className=\" span-btn btn-color btn-edit \" onClick={this.onEdit.bind(this, item._id, item.list)}><i class=\"fas fa-pencil-alt\"></i></span>\r\n                <span href=\"\" className=\" span-btn btn-color btn-delete\" onClick={this.onDelete.bind(this, item._id)}><i class=\"fas fa-trash-alt\"></i></span>\r\n              </div>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default List;","import React, { Component } from 'react';\nimport  List from './components/List';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"container container-padding\">\n        <div className=\"row\">\n          <div className=\"col-md-6 mx-auto\">\n            <h2 className=\"text-center\">React & Express ToDo List</h2>\n            <List />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}